When it comes to online security, one of the first lines of defense is having strong passwords. Creating a strong password can significantly reduce the risk of unauthorized access to your accounts and personal information. In this article, we'll walk you through a simple yet effective Python script that serves as a password strength checker. By understanding what makes a strong password and employing regular expressions, this tool will help you evaluate the strength of your passwords and ensure they meet essential security criteria.
I created a password strength checking script below.


import re

def is_strong_password(password):
    # Minimum length requirement
    if len(password) < 8:
        return False

    # Check for uppercase, lowercase, digits, and special characters
    regex_upper = re.compile(r'[A-Z]')
    regex_lower = re.compile(r'[a-z]')
    regex_digit = re.compile(r'\d')
    regex_special = re.compile(r'[!@#$%^&*(),.?":{}|<>]')

    if not regex_upper.search(password):
        return False

    if not regex_lower.search(password):
        return False

    if not regex_digit.search(password):
        return False

    if not regex_special.search(password):
        return False

    return True

def password_strength_info(password):
    strength_info = {
        'length': len(password) >= 8,
        'uppercase': bool(re.search(r'[A-Z]', password)),
        'lowercase': bool(re.search(r'[a-z]', password)),
        'digits': bool(re.search(r'\d', password)),
        'special_characters': bool(re.search(r'[!@#$%^&*(),.?":{}|<>]', password)),
    }

    return strength_info

def main():
    while True:
        password = input("Enter your password: ")

        if is_strong_password(password):
            print("Your password is strong!")
        else:
            print("Your password is weak. Please make sure it has:")
            print("- At least 8 characters")
            print("- Uppercase and lowercase letters")
            print("- Digits")
            print("- Special characters (e.g., !@#$%^&*(),.?\":{}|<>)")

        show_strength_info = input("Do you want to see detailed strength information? (y/n): ").lower()

        if show_strength_info == 'y':
            strength_info = password_strength_info(password)
            print("\nPassword Strength Information:")
            for key, value in strength_info.items():
                print(f"{key.capitalize()}: {'✓' if value else '✗'}")

        try_again = input("Do you want to check another password? (y/n): ").lower()
        if try_again != 'y':
            break

if __name__ == "__main__":
    main()



Please note that this password strength checker is a basic implementation and may not cover all aspects of password security. For real-world applications, it is essential to consider more advanced security measures, such as using password hashing and salting.
